version: '3.7'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: sh -c "python manage.py collectstatic --no-input --clear && python manage.py makemigrations && python manage.py migrate && gunicorn config.wsgi:application --bind 0.0.0.0:8001 "
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    expose:
      - 8001
    env_file:
      - ./backend/.env.prod
    depends_on:
      db:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - 80:80
    env_file:
      - ./frontend/.env.production.local

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./db/.env.prod

  web:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - 8000:8000
    depends_on:
      - backend

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: celery -A config worker -l info
    depends_on:
      - backend
      - redis
    restart: on-failure
    env_file:
      - ./backend/.env.dev

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: celery -A config beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile /tmp/celerybeat.pid
    depends_on:
      - celery
    restart: on-failure
    env_file:
      - ./backend/.env.dev

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - '5555:5555'
    command: "celery -A config flower --address=0.0.0.0"
    depends_on:
      - celery
    env_file:
      - ./backend/.env.dev

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:


